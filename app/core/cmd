import sys
import os
import asyncio
import argparse
import getpass

sys.path[0] = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
from app.core.database import engine, Base
from app.service.user_service import UserService
from app.service.permission_service import PermissionService
from app.service.user_permission_service import UserPermissionService  # Import để sử dụng hàm set_permission
from app.model.user import User  # Nếu cần dùng đối tượng User

# Import các model để tạo bảng
from app.model import all_models

user_service = UserService()
permission_service = PermissionService()
ups = UserPermissionService()

# Hàm khởi tạo database
async def init_db():
    """Khởi tạo database (tạo bảng nếu chưa có)."""
    async with engine.begin() as conn:
        await conn.run_sync(
            lambda conn: Base.metadata.create_all(
                bind=conn, tables=[model.__table__ for model in all_models]
            )
        )
    print("✅ Database đã được khởi tạo.")

def prompt_password():
    """Hàm yêu cầu nhập mật khẩu và xác nhận mật khẩu."""
    while True:
        pwd1 = getpass.getpass("Nhập mật khẩu: ")
        pwd2 = getpass.getpass("Nhập lại mật khẩu: ")
        if pwd1 == pwd2:
            return pwd1
        else:
            print("Mật khẩu không khớp. Vui lòng thử lại.")

# Hàm tạo superadmin
async def create_superadmin():
    """Tạo superadmin với mật khẩu được nhập từ bàn phím."""
    try:
        superadmin = await user_service.get_user_by_username("superadmin")
        print("❌ superadmin đã tồn tại, Không cần tạo mới")
        return superadmin
    except:
        password = await asyncio.to_thread(prompt_password)
        superadmin = await user_service.create_superadmin(password)
        if superadmin:
            print("✅ superadmin đã được tạo.")
        else:
            print("❌ tạo superadmin không thành công")
        return superadmin

# Hàm thay đổi mật khẩu superadmin
async def change_superadmin_password():
    """Thay đổi mật khẩu của superadmin với mật khẩu được nhập từ bàn phím."""
    new_password = await asyncio.to_thread(prompt_password)
    if await user_service.change_superadmin_password(new_password):
        print("✅ thay đổi mật khẩu thành công.")
    else:
        print("❌ thay đổi mật khẩu không thành công")

# Hàm đồng bộ quyền tĩnh vào cơ sở dữ liệu
async def sync_permissions():
    """Đồng bộ quyền tĩnh vào cơ sở dữ liệu."""
    await permission_service.sync_permissions()
    print("✅ Đồng bộ quyền thành công.")

# Hàm cấp toàn bộ quyền cho superadmin
async def grant_all_permissions_to_superadmin():
    """
    Lấy toàn bộ quyền từ DB và sử dụng hàm set_permission để cấp cho superadmin.
    """
    # Lấy thông tin superadmin (giả sử đã được tạo ở bước create_superadmin)
    superadmin = await user_service.get_user_by_username("superadmin")
    # Lấy toàn bộ quyền từ DB
    permissions = await permission_service.get_all_permissions()
    # Sử dụng UserPermissionService để cấp quyền
    await ups.set_permission(superadmin, permissions)
    print("✅ Cấp toàn bộ quyền cho superadmin thành công.")

# Hàm thực hiện toàn bộ quá trình khởi tạo hệ thống
async def init_all():
    """
    Thực hiện các bước:
      1. Tạo database
      2. Tạo superadmin (nếu chưa tồn tại)
      3. Đồng bộ quyền tĩnh vào DB
      4. Cấp toàn bộ quyền cho superadmin
    """
    await init_db()
    await create_superadmin()
    await sync_permissions()
    await grant_all_permissions_to_superadmin()
    print("✅ Khởi tạo hệ thống thành công.")

# Xử lý argparse
def main():
    parser = argparse.ArgumentParser(description="Quản lý database, superadmin và quyền.")
    subparsers = parser.add_subparsers(dest="command")

    # Lệnh khởi tạo database
    subparsers.add_parser("init_db", help="Khởi tạo database (tạo bảng nếu chưa có).")

    # Lệnh tạo superadmin
    subparsers.add_parser("create_admin", help="Tạo superadmin mặc định.")

    # Lệnh thay đổi mật khẩu superadmin
    subparsers.add_parser("change_password", help="Thay đổi mật khẩu superadmin.")

    # Lệnh đồng bộ quyền
    subparsers.add_parser("sync_permissions", help="Đồng bộ quyền từ danh sách tĩnh vào database.")

    # Lệnh cấp toàn bộ quyền cho superadmin
    subparsers.add_parser("grant_permissions", help="Cấp toàn bộ quyền cho superadmin.")

    # Lệnh khởi tạo toàn bộ hệ thống
    subparsers.add_parser("init_all", help="Thực hiện toàn bộ khởi tạo: DB, superadmin, đồng bộ quyền, cấp quyền.")

    args = parser.parse_args()

    # Chạy lệnh tương ứng
    if args.command == "init_db":
        asyncio.run(init_db())
    elif args.command == "create_admin":
        asyncio.run(create_superadmin())
    elif args.command == "change_password":
        asyncio.run(change_superadmin_password())
    elif args.command == "sync_permissions":
        asyncio.run(sync_permissions())
    elif args.command == "grant_permissions":
        asyncio.run(grant_all_permissions_to_superadmin())
    elif args.command == "init_all":
        asyncio.run(init_all())
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
